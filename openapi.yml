openapi: 3.1.0
info:
  title: 'qBittorrent Authentication API'
  description: 'All API methods follows the format /api/v2/APIName/methodName, where APIName is a certain subgroup of API methods whose functionality is related.All API methods only allows GET or POST methods. Use POST when you are mutating some state (or when your request is too big to fit into GET) and use GET otherwise. Starting with qBittorrent v4.4.4, server will return 405 Method Not Allowed when you used the wrong request method.All API methods require authentication (except /api/v2/auth/login, obviously).'
  version: v2.8.3
paths:
  /api/v2/auth/login:
    post:
      summary: 'Login to qBittorrent WebUI'
      operationId: Login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginDto'
      responses:
        '200':
          description: 'Login successful'
          headers:
            Set-Cookie:
              description: 'Cookie containing session ID'
              schema:
                type: string
        '403':
          description: "User's IP is banned for too many failed login attempts"
  /api/v2/auth/logout:
    post:
      summary: 'Logout from qBittorrent WebUI'
      operationId: Logout
      responses:
        '200':
          description: 'Logout successful'
  /api/v2/app/version:
    post:
      summary: 'Get qBittorrent version'
      operationId: Version
      responses:
        '200':
          description: 'qBittorrent version'
          content:
            text/plain:
              schema:
                type: string
  /api/v2/app/webapiVersion:
    post:
      summary: 'Get qBittorrent WebAPI version'
      operationId: WebAPIVersion
      responses:
        '200':
          description: 'qBittorrent WebAPI version'
          content:
            text/plain:
              schema:
                type: string
  /api/v2/app/buildInfo:
    post:
      summary: 'Get qBittorrent build info'
      operationId: BuildInfo
      responses:
        '200':
          description: 'qBittorrent build info'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuildInfoDto'
  /api/v2/app/shutdown:
    post:
      summary: 'Shutdown qBittorrent'
      operationId: Shutdown
      responses:
        '200':
          description: 'qBittorrent shutdown successful'
  /api/v2/app/preferences:
    post:
      summary: 'Get qBittorrent preferences'
      operationId: Preferences
      responses:
        '200':
          description: 'qBittorrent preferences'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreferencesDto'
  /api/v2/app/setPreferences:
    post:
      summary: 'Set qBittorrent preferences'
      operationId: SetPreferences
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PreferencesDto'
      responses:
        '200':
          description: 'qBittorrent preferences set successfully'
  /api/v2/app/defaultSavePath:
    post:
      summary: 'Get qBittorrent default save path'
      operationId: DefaultSavePath
      responses:
        '200':
          description: 'qBittorrent default save path'
          content:
            text/plain:
              schema:
                type: string
  /api/v2/log/main:
    post:
      summary: 'Get qBittorrent main log'
      operationId: Main
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MainLogReqDto'
      responses:
        '200':
          description: 'qBittorrent main log'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MainLogDto'
  /api/v2/log/peer:
    post:
      summary: 'Get qBittorrent peer log'
      operationId: Peer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                last_known_id:
                  type: integer
                  description: 'Exclude messages with "message id" <= last_known_id'
                  default: -1
      responses:
        '200':
          description: 'qBittorrent peer log'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PeerLogDto'
  /api/v2/sync/maindata:
    post:
      summary: 'Get qBittorrent main data'
      operationId: MainData
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                rid:
                  type: integer
                  description: 'Response ID. If not provided, rid=0 will be assumed. If the given rid is different from the one of last server reply, full_update will be true (see the server reply details for more info)'
                  default: 0
      responses:
        '200':
          description: 'qBittorrent main data'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MainDataDto'
  /api/v2/sync/torrentPeers:
    post:
      summary: 'Get qBittorrent torrent peers'
      operationId: TorrentPeers
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                hash:
                  type: string
                  description: 'Torrent hash'
                rid:
                  type: integer
                  description: 'Response ID. If not provided, rid=0 will be assumed. If the given rid is different from the one of last server reply, full_update will be true (see the server reply details for more info)'
                  default: 0
      responses:
        '200':
          description: 'qBittorrent torrent peers'
        '404':
          description: 'Torrent not found'
  /api/v2/transfer/info:
    post:
      summary: 'Get qBittorrent transfer info'
      operationId: TransferInfo
      responses:
        '200':
          description: 'qBittorrent transfer info'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferInfoDto'
  /api/v2/transfer/speedLimitsMode:
    post:
      summary: 'Get qBittorrent transfer speed limits mode'
      operationId: SpeedLimitsMode
      responses:
        '200':
          description: 'qBittorrent transfer speed limits mode'
          content:
            text/plain:
              schema:
                type: string
                enum: [ '1','0' ]
  /api/v2/transfer/toggleSpeedLimitsMode:
    post:
      summary: 'Toggle qBittorrent transfer speed limits mode'
      operationId: ToggleSpeedLimitsMode
      responses:
        '200':
          description: 'qBittorrent transfer speed limits mode toggled successfully'
  /api/v2/transfer/downloadLimit:
    post:
      summary: 'Get qBittorrent transfer download limit'
      operationId: DownloadLimit
      responses:
        '200':
          description: 'qBittorrent transfer download limit'
          content:
            text/plain:
              schema:
                type: integer
  /api/v2/transfer/setDownloadLimit:
    post:
      summary: 'Set qBittorrent transfer download limit'
      operationId: SetDownloadLimit
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                limit:
                  type: integer
                  description: 'The global download speed limit to set in bytes/second'
      responses:
        '200':
          description: 'qBittorrent transfer download limit set successfully'
  /api/v2/transfer/uploadLimit:
    post:
      summary: 'Get qBittorrent transfer upload limit'
      operationId: UploadLimit
      responses:
        '200':
          description: 'qBittorrent transfer upload limit'
          content:
            text/plain:
              schema:
                type: integer
  /api/v2/transfer/setUploadLimit:
    post:
      summary: 'Set qBittorrent transfer upload limit'
      operationId: SetUploadLimit
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                limit:
                  type: integer
                  description: 'The global upload speed limit to set in bytes/second'
      responses:
        '200':
          description: 'qBittorrent transfer upload limit set successfully'
  /api/v2/transfer/banPeers:
    post:
      summary: 'Ban peers'
      operationId: BanPeers
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                peers:
                  type: string
                  description: 'The peer to ban,or multiple peers separated by a pipe |. Each peer is a colon-separated host:port'
      responses:
        '200':
          description: 'Peers banned successfully'
  /api/v2/torrents/info:
    post:
      summary: 'Get qBittorrent torrents info'
      operationId: Info
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TorrentsInfoReqDto'
      responses:
        '200':
          description: 'qBittorrent torrents info'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TorrentsInfoDto'
  /api/v2/torrents/properties:
    post:
      summary: 'Get qBittorrent torrent properties'
      operationId: Properties
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                hash:
                  type: string
                  description: 'The hash of the torrent you want to get the generic properties of'
      responses:
        '200':
          description: 'qBittorrent torrent properties'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TorrentPropertiesDto'
        '404':
          description: 'Torrent not found'
  /api/v2/torrents/trackers:
    post:
      summary: 'Get qBittorrent torrent trackers'
      operationId: Trackers
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                hash:
                  type: string
                  description: 'The hash of the torrent you want to get the trackers of'
      responses:
        '200':
          description: 'qBittorrent torrent trackers'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TrackerDto'
        '404':
          description: 'Torrent not found'
  /api/v2/torrents/webseeds:
    post:
      summary: 'Get qBittorrent torrent web seeds'
      operationId: WebSeeds
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                hash:
                  type: string
                  description: 'The hash of the torrent you want to get the webseeds of'
      responses:
        '200':
          description: 'qBittorrent torrent web seeds'
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    url:
                      type: string
                      description: 'The URL of the webseed'
        '404':
          description: 'Torrent not found'
  /api/v2/torrents/files:
    post:
      summary: 'Get torrent contents'
      operationId: Files
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                hash:
                  type: string
                  description: 'The hash of the torrent you want to get the contents of'
                index:
                  type: string
                  description: 'The indexes of the files you want to retrieve. indexes can contain multiple values separated by |.'
                  required: false
      responses:
        '200':
          description: 'Torrent contents'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FileDto'
        '404':
          description: 'Torrent not found'
  /api/v2/torrents/pieceStates:
    post:
      summary: 'Get torrent piece states'
      operationId: PieceStates
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                hash:
                  type: string
                  description: "The hash of the torrent you want to get the pieces' states of"
      responses:
        '200':
          description: 'Torrent piece states'
          content:
            application/json:
              schema:
                type: array
                items:
                  type: integer
                  enum: [ 0,1,2 ]
                  description: 'The state of the piece'
        '404':
          description: 'Torrent not found'
  /api/v2/torrents/pieceHashes:
    post:
      summary: "Get torrent pieces' hashes"
      operationId: PieceHashes
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                hash:
                  type: string
                  description: "The hash of the torrent you want to get the pieces' hashes of"
      responses:
        '200':
          description: "Torrent pieces' hashes"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  description: "The hash of the piece"
        '404':
          description: 'Torrent not found'
  /api/v2/torrents/pause:
    post:
      summary: 'Pause torrents'
      operationId: Pause
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                hashes:
                  type: string
                  description: "The hashes of the torrents you want to pause. hashes can contain multiple hashes separated by |, to pause multiple torrents, or set to all, to pause all torrents."
      responses:
        '200':
          description: 'Torrents paused successfully'
  /api/v2/torrents/resume:
    post:
      summary: 'Resume torrents'
      operationId: Resume
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                hashes:
                  type: string
                  description: "The hashes of the torrents you want to resume. hashes can contain multiple hashes separated by |, to resume multiple torrents, or set to all, to resume all torrents."
      responses:
        '200':
          description: 'Torrents resumed successfully'
  /api/v2/torrents/delete:
    post:
      summary: 'Delete torrents'
      operationId: Delete
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                hashes:
                  type: string
                  description: "The hashes of the torrents you want to delete. hashes can contain multiple hashes separated by |, to delete multiple torrents, or set to all, to delete all torrents."
                deletFiles:
                  type: boolean
                  description: 'If set to true, the downloaded data will also be deleted, otherwise has no effect.'
      responses:
        '200':
          description: 'Torrents deleted successfully'
  /api/v2/torrents/recheck:
    post:
      summary: 'Recheck torrents'
      operationId: Recheck
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                hashes:
                  type: string
                  description: "The hashes of the torrents you want to recheck. hashes can contain multiple hashes separated by |, to recheck multiple torrents, or set to all, to recheck all torrents."
      responses:
        '200':
          description: 'Torrents rechecked successfully'
  /api/v2/torrents/reannounce:
    post:
      summary: 'Reannounce torrents'
      operationId: Reannounce
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                hashes:
                  type: string
                  description: "The hashes of the torrents you want to reannounce. hashes can contain multiple hashes separated by |, to reannounce multiple torrents, or set to all, to reannounce all torrents."
      responses:
        '200':
          description: 'Torrents reannounced successfully'
  /api/v2/torrents/add:
    post:
      summary: 'Add new torrent'
      operationId: Add
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AddTorrentDto'
      responses:
        '200':
          description: 'Torrent added successfully'
        '415':
          description: 'Torrent file is not valid'
  /api/v2/torrents/addTrackers:
    post:
      summary: 'Add trackers to torrent'
      operationId: AddTrackers
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                hash:
                  type: string
                  description: 'The hash of the torrent'
                urls:
                  type: string
                  description: 'The URLs of the trackers you want to add.'
      responses:
        '200':
          description: 'Trackers added successfully'
        '404':
          description: 'Torrent hash was not found'
  /api/v2/torrents/editTracker:
    post:
      summary: 'Edit tracker of torrent'
      operationId: EditTracker
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                hash:
                  type: string
                  description: 'The hash of the torrent'
                origUrl:
                  type: string
                  description: 'The tracker URL you want to edit'
                newUrl:
                  type: string
                  description: 'The new URL to replace the origUrl'
      responses:
        '200':
          description: 'Tracker edited successfully'
        '400':
          description: 'newUrl is not a valid URL'
        '404':
          description: 'Torrent hash was not found'
        '409':
          description: 'newUrl already exists for the torrent or origUrl was not found'
  /api/v2/torrents/removeTrackers:
    post:
      summary: 'Remove trackers'
      operationId: RemoveTrackers
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                hash:
                  type: string
                  description: 'The hash of the torrent'
                urls:
                  type: string
                  description: 'URLs to remove, separated by |'
      responses:
        '200':
          description: 'Trackers deleted successfully'
        '404':
          description: 'Torrent hash was not found'
        '409':
          description: 'All urls were not found'
  /api/v2/torrents/addPeers:
    post:
      summary: 'Add peers to torrent'
      operationId: AddPeers
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                hashes:
                  type: string
                  description: 'The hash of the torrent, or multiple hashes separated by a pipe |'
                peers:
                  type: string
                  description: 'The peer to add, or multiple peers separated by a pipe |. Each peer is a colon-separated'
  /api/v2/torrents/increasePrio:
    post:
      summary: 'Increase torrent priority'
      operationId: IncreasePrio
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                hashes:
                  type: string
                  description: 'The hashes of the torrents you want to increase the priority of. hashes can contain multiple hashes separated by |, to increase the priority of multiple torrents, or set to all, to increase the priority of all torrents.'
      responses:
        '200':
          description: 'Torrents priority increased successfully'
        '409':
          description: 'Torrent queueing is not enabled'
  /api/v2/torrents/topPrio:
    post:
      summary: 'Set torrent priority to top'
      operationId: TopPrio
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                hashes:
                  type: string
                  description: 'The hashes of the torrents you want to set to the maximum priority. hashes can contain multiple hashes separated by |, to set multiple torrents to the maximum priority, or set to all, to set all torrents to the maximum priority.'
      responses:
        '200':
          description: 'Torrents priority set to top successfully'
        '409':
          description: 'Torrent queueing is not enabled'
  /api/v2/torrents/bottomPrio:
    post:
      summary: 'Set torrent priority to bottom'
      operationId: BottomPrio
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                hashes:
                  type: string
                  description: 'The hashes of the torrents you want to set to the minimum priority. hashes can contain multiple hashes separated by |, to set multiple torrents to the minimum priority, or set to all, to set all torrents to the minimum priority.'
      responses:
        '200':
          description: 'Torrents priority set to bottom successfully'
        '409':
          description: 'Torrent queueing is not enabled'
  /api/v2/torrents/filePrio:
    post:
      summary: 'Set file priority'
      operationId: FilePrio
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                hashes:
                  type: string
                  description: 'The hash of the torrent'
                id:
                  type: string
                  description: 'File ids, separated by |'
                priority:
                  type: string
                  description: 'File priority to set (consult torrent contents API for possible values)'
      responses:
        '200':
          description: 'File priority set successfully'
        '400':
          description: 'Priority is invalid or At least one file id is not a valid integer'
        '404':
          description: 'Torrent hash was not found'
        '409':
          description: "Torrent metadata hasn't downloaded yet or At least one file id was not found"
  /api/v2/torrents/downloadLimit:
    post:
      summary: 'Set torrent download limit'
      operationId: TorrentsDownloadLimit
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                hashes:
                  type: string
                  description: 'can contain multiple hashes separated by | or set to all'
      responses:
        '200':
          description: 'Torrent download limit set successfully'
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  description: 'download speed limit in bytes per second; this value will be zero if no limit is applied'
  /api/v2/torrents/setDownloadLimit:
    post:
      summary: 'Set torrent download limit'
      operationId: SetTorrentsDownloadLimit
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                hashes:
                  type: string
                  description: 'The hashes of the torrents you want to set the download limit of. hashes can contain multiple hashes separated by |, to set the download limit of multiple torrents, or set to all, to set the download limit of all torrents.'
                limit:
                  type: string
                  description: 'the download speed limit in bytes per second you want to set.'
      responses:
        '200':
          description: 'Torrent download limit set successfully'
  /api/v2/torrents/setShareLimits:
    post:
      summary: 'Set torrent share limits'
      operationId: SetShareLimits
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                hashes:
                  type: string
                ratioLimit:
                  type: string
                seedingTimeLimit:
                  type: string
      responses:
        '200':
          description: 'Torrent share limits set successfully'
  /api/v2/torrents/uploadLimit:
    post:
      summary: 'Set torrent upload limit'
      operationId: TorrentsUploadLimit
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                hashes:
                  type: string
                  description: 'can contain multiple hashes separated by | or set to all'
      responses:
        '200':
          description: 'Torrent upload limit set successfully'
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  description: 'upload speed limit in bytes per second; this value will be zero if no limit is applied'
  /api/v2/torrents/setLocation:
    post:
      summary: 'Set torrent location'
      operationId: SetLocation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                hashes:
                  type: string
                location:
                  type: string
                  description: "the location to download the torrent to. If the location doesn't exist, the torrent's location is unchanged."
      responses:
        '200':
          description: 'Torrent location set successfully'
        '400':
          description: 'Save path is empty'
        '403':
          description: 'Save path is not writable'
        '409':
          description: 'Unable to create save path directory'
  /api/v2/torrents/rename:
    post:
      summary: 'Set torrent name'
      operationId: Rename
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                hashes:
                  type: string
                name:
                  type: string
      responses:
        '200':
          description: 'Torrent renamed successfully'
        '404':
          description: 'Torrent hash is invalid'
        '409':
          description: 'Torrent name is empty'
  /api/v2/torrents/setCategory:
    post:
      summary: 'Set torrent category'
      operationId: SetCategory
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                hashes:
                  type: string
                category:
                  type: string
      responses:
        '200':
          description: 'Torrent category set successfully'
        '409':
          description: 'Category name does not exist'
  /api/v2/torrents/categories:
    post:
      summary: 'Get all categories'
      operationId: Categories
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: object
          description: 'Torrent category added successfully'
  /api/v2/torrents/createCategory:
    post:
      summary: 'Add new category'
      operationId: CreateCategory
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                category:
                  type: string
                savePath:
                  type: string
      responses:
        '200':
          description: 'Torrent category added successfully'
        '400':
          description: 'Category name is empty'
        '409':
          description: 'Category name is invalid'
  /api/v2/torrents/editCategory:
    post:
      summary: 'Edit category'
      operationId: EditCategory
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                category:
                  type: string
                savePath:
                  type: string
      responses:
        '200':
          description: 'Torrent category edited successfully'
        '400':
          description: 'Category name is empty'
        '409':
          description: 'Category name is invalid'
  /api/v2/torrents/removeCategories:
    post:
      summary: 'Remove categories'
      operationId: RemoveCategories
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                categories:
                  type: string
                  description: 'can contain multiple cateogies separated by \n'
      responses:
        '200':
          description: 'Torrent categories removed successfully'
  /api/v2/torrents/addTags:
    post:
      summary: 'Add tags to torrent'
      operationId: AddTags
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                hashes:
                  type: string
                tags:
                  type: string
      responses:
        '200':
          description: 'Tags added successfully'
  /api/v2/torrents/removeTags:
    post:
      summary: 'Remove tags from torrent'
      operationId: RemoveTags
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                hashes:
                  type: string
                tags:
                  type: string
      responses:
        '200':
          description: 'Tags removed successfully'
  /api/v2/torrents/tags:
    post:
      summary: 'Get all tags'
      operationId: Tags
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
  /api/v2/torrents/createTags:
    post:
      summary: 'Create tags'
      operationId: CreateTags
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                tags:
                  type: string
                  description: "a list of tags you want to create. Can contain multiple tags separated by ','"
      responses:
        '200':
          description: 'Tags created successfully'
  /api/v2/torrents/setAutoManagement:
    post:
      summary: 'Set auto management'
      operationId: SetAutoManagement
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                hashes:
                  type: string
                enable:
                  type: boolean
      responses:
        '200':
          description: 'Auto management set successfully'
  /api/v2/torrents/toggleSequentialDownload:
    post:
      summary: 'Toggle sequential download'
      operationId: ToggleSequentialDownload
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                hashes:
                  type: string
      responses:
        '200':
          description: 'Sequential download toggled successfully'
  /api/v2/torrents/toggleFirstLastPiecePrio:
    post:
      summary: 'Toggle first last piece priority'
      operationId: ToggleFirstLastPiecePrio
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                hashes:
                  type: string
      responses:
        '200':
          description: 'First last piece priority toggled successfully'
  /api/v2/torrents/setForceStart:
    post:
      summary: 'Set force start'
      operationId: SetForceStart
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                hashes:
                  type: string
                value:
                  type: boolean
  /api/v2/torrents/setSuperSeeding:
    post:
      summary: 'Set super seeding'
      operationId: SetSuperSeeding
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                hashes:
                  type: string
                value:
                  type: boolean
      responses:
        '200':
          description: 'Super seeding set successfully'
  /api/v2/torrents/renameFile:
    post:
      summary: 'Rename file'
      operationId: RenameFile
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                hash:
                  type: string
                  description: 'The hash of the torrent'
                oldPath:
                  type: string
                  description: 'The old name of the file'
                newPath:
                  type: string
                  description: 'The new name of the file'
          responses:
            '200':
              description: 'File renamed successfully'
            '400':
              description: 'Missing newPath parameter'
            '409':
              description: 'Invalid newPath or oldPath, or newPath already in use'
  /api/v2/torrents/renameFolder:
    post:
      summary: 'Rename folder'
      operationId: RenameFolder
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                hash:
                  type: string
                  description: 'The hash of the torrent'
                oldPath:
                  type: string
                  description: 'The old path of the torrent'
                newPath:
                  type: string
                  description: 'The new path to use for the file'
      responses:
        '200':
          description: 'Folder renamed successfully'
        '400':
          description: 'Missing newPath parameter'
        '409':
          description: 'Invalid newPath or oldPath, or newPath already in use'
  /api/v2/rss/addFolder:
    post:
      summary: 'Add RSS folder'
      operationId: AddRssFolder
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                path:
                  type: string
                  description: 'Current full path of added folder (e.g. "The Pirate Bay\Top100")'
      responses:
        '200':
          description: 'Folder added successfully'
        '409':
          description: 'Failure to add folder'
  /api/v2/rss/addFeed:
    post:
      summary: 'Add RSS feed'
      operationId: AddRssFeed
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                url:
                  type: string
                  description: 'URL of the RSS feed'
                path:
                  type: string
                  description: 'Current full path of added feed (e.g. "The Pirate Bay\Top100")'
      responses:
        '200':
          description: 'Feed added successfully'
        '409':
          description: 'Failure to add feed'
  /api/v2/rss/removeItem:
    post:
      summary: 'Remove RSS item'
      operationId: RemoveRssItem
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                path:
                  type: string
                  description: 'Current full path of removed item (e.g. "The Pirate Bay\Top100")'
      responses:
        '200':
          description: 'Item removed successfully'
        '409':
          description: 'Failure to remove item'
  /api/v2/rss/moveItem:
    post:
      summary: 'Move RSS item'
      operationId: MoveRssItem
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                itemPath:
                  type: string
                  description: 'Current full path of item (e.g. "The Pirate Bay\Top100")'
                destPath:
                  type: string
                  description: 'New full path of item (e.g. "The Pirate Bay")'
      responses:
        '200':
          description: 'Item moved successfully'
        '409':
          description: 'Failure to move item'
  /api/v2/rss/items:
    post:
      summary: 'Get all items'
      operationId: Items
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                withData:
                  type: boolean
                  description: 'True if you want to get the data of the items'
      responses:
        '200':
          description: 'Items returned successfully'
          content:
            application/json:
              schema:
                type: object
  /api/v2/rss/markAsRead:
    post:
      summary: 'Mark item as read'
      operationId: MarkAsRead
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                itemPath:
                  type: string
                  description: 'Current full path of item (e.g. "The Pirate Bay\Top100")'
                articleId:
                  type: string
                  description: 'ID of article'
      responses:
        '200':
          description: 'Item marked as read successfully'
        '409':
          description: 'Failure to mark item as read'
  /api/v2/rss/refreshItem:
    post:
      summary: 'Refresh item'
      operationId: RefreshItem
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                itemPath:
                  type: string
                  description: 'Current full path of item (e.g. "The Pirate Bay\Top100")'
      responses:
        '200':
          description: 'Item refreshed successfully'
        '409':
          description: 'Failure to refresh item'
  /api/v2/rss/setRule:
    post:
      summary: 'Set auto-downloading rule'
      operationId: SetRssRule
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                ruleName:
                  type: string
                  description: 'Rule name (e.g. "Punisher")'
                ruleDef:
                  type: object
                  description: 'JSON encoded rule definition'
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/RssRuleDto'
      responses:
        '200':
          description: 'Rule set successfully'
        '409':
          description: 'Failure to set rule'
  /api/v2/rss/renameRule:
    post:
      summary: 'Rename auto-downloading rule'
      operationId: RenameRssRule
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                ruleName:
                  type: string
                  description: 'Rule name (e.g. "Punisher")'
                newRulesName:
                  type: string
                  description: 'New rule name (e.g. "Punisher")'
      responses:
        '200':
          description: 'Rule renamed successfully'
  /api/v2/rss/removeRule:
    post:
      summary: 'Remove auto-downloading rule'
      operationId: RemoveRssRule
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                ruleName:
                  type: string
                  description: 'Rule name (e.g. "Punisher")'
      responses:
        '200':
          description: 'Rule removed successfully'
  /api/v2/rss/rules:
    post:
      summary: 'Get all auto-downloading rules'
      operationId: Rules
      responses:
        '200':
          description: 'Rules returned successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RssRuleDto'
  /api/v2/rss/matchingArticles:
    post:
      summary: 'Get all matching articles'
      operationId: MatchingArticles
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                ruleName:
                  type: string
                  description: 'Rule name (e.g. "Punisher")'
      responses:
        '200':
          description: 'Matching articles returned successfully'
          content:
            application/json:
              schema:
                type: object
  /api/v2/search/start:
    post:
      summary: 'Start search'
      operationId: Start
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                pattern:
                  type: string
                  description: 'Search pattern (e.g. "Ubuntu")'
                category:
                  type: string
                  description: 'Search category (e.g. "all")'
                plugins:
                  type: string
                  description: 'Search plugins (e.g. "all")'
      responses:
        '200':
          description: 'Search started successfully'
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: number
                    description: 'Search ID'
        '409':
          description: 'User has reached the limit of max Running searches (currently set to 5)'
  /api/v2/search/stop:
    post:
      summary: 'Stop search'
      operationId: Stop
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: number
                  description: 'Search ID'
      responses:
        '200':
          description: 'Search stopped successfully'
        '404':
          description: 'Search job was not found'
  /api/v2/search/status:
    post:
      summary: 'Get search status'
      operationId: Status
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: number
                  description: 'Search ID'
      responses:
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: number
                    description: 'ID of the search job'
                  status:
                    type: string
                    description: 'Current status of the search job (either Running or Stopped)'
                  total:
                    type: number
                    description: 'total number of results. If the status is Running this number may contineu to increase'
  /api/v2/search/results:
    post:
      summary: 'Get search results'
      operationId: Results
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: number
                  description: 'Search ID'
                limit:
                  type: number
                  description: 'Maximum number of results to return'
                offset:
                  type: number
                  description: 'Offset of the first result to return'
      responses:
        '200':
          description: 'Search results returned successfully'
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      application/json:
                        schema:
                          type: object
                          properties:
                            descrLink:
                              type: string
                              description: "URL of the torrent's description page."
                            fileName:
                              type: string
                              description: 'Name of the file.'
                            fileSize:
                              type: number
                              description: 'Size of the file in bytes.'
                            fileUrl:
                              type: string
                              description: 'Torrent download link, usually either .torrent file or magnet link.'
                            nbLeechers:
                              type: number
                              description: 'Number of leechers.'
                            nbSeeders:
                              type: number
                              description: 'Number of seeders.'
                            siteUrl:
                              type: string
                              description: 'URL of the torrent site.'
                  status:
                    type: string
                    description: 'Current status of the search job (either Running or Stopped)'
                  total:
                    type: number
                    description: 'Total number of results. If the status is Running this number may contineu to increase'
          '404':
            description: 'Search job was not found'
          '409':
            description: '	Offset is too large, or too small (e.g. absolute value of negative number is greater than # results)'
  /api/v2/search/delete:
    post:
      summary: 'Delete search'
      operationId: SearchDelete
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: number
                  description: 'Search ID'
      responses:
        '200':
          description: 'Search deleted successfully'
        '404':
          description: 'Search job was not found'
  /api/v2/search/plugins:
    post:
      summary: 'Get search plugins'
      operationId: Plugins
      responses:
        content:
          application/json:
            schema:
              type: array
              items:
                application/json:
                  schema:
                    type: object
                    properties:
                      enabled:
                        type: bool
                        description: 'Indicates whether the plugin is enabled or not.'
                      fullName:
                        type: string
                        description: 'Full name of the plugin.'
                      name:
                        type: string
                        description: 'Short name of the plugin.'
                      supportedCategories:
                        type: array
                        description: 'List of category objects supported by the plugin.'
                      url:
                        type: string
                        description: 'URL of the torrent site.'
                      version:
                        type: string
                        description: 'Installed version of the plugin.'
  /api/v2/search/installPlugin:
    post:
      summary: 'Get search categories'
      operationId: InstallPlugin
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                sources:
                  type: string
                  description: 'Url or file path of the plugin to install (e.g. "https://raw.githubusercontent.com/qbittorrent/search-plugins/master/nova3/engines/legittorrents.py"). Supports multiple sources separated by |'
      responses:
        '200':
          description: 'Plugin installed successfully'
  /api/v2/search/uninstallPlugin:
    post:
      summary: 'Uninstall search plugin'
      operationId: UninstallPlugin
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                names:
                  type: string
                  description: 'Name of the plugin to uninstall (e.g. "legittorrents"). Supports multiple names separated by |'
      responses:
        '200':
          description: 'Plugin uninstalled successfully'
  /api/v2/search/enablePlugin:
    post:
      summary: 'Enable search plugin'
      operationId: EnablePlugin
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                names:
                  type: string
                  description: 'Name of the plugin to enable (e.g. "legittorrents"). Supports multiple names separated by |'
                enable:
                  type: bool
                  description: 'True to enable the plugin, false to disable it'
      responses:
        '200':
          description: 'Plugin enabled successfully'
  /api/v2/search/updatePlugins:
    post:
      summary: 'Update search plugins'
      operationId: UpdatePlugins
      responses:
        '200':
          description: 'Plugins updated successfully'
components:
  schemas:
    LoginDto:
      type: object
      properties:
        username:
          type: string
          description: Username used to access the WebUI
        password:
          type: string
          description: Password used to access the WebUI
    BuildInfoDto:
      type: object
      properties:
        qt:
          type: string
          description: Qt version
        libtorrent:
          type: string
          description: libtorrent version
        boost:
          type: string
          description: Boost version
        openssl:
          type: string
          description: OpenSSL version
        bitness:
          type: integer
          description: Bitness of the OS
    PreferencesDto:
      type: object
      properties:
        locale:
          type: string
          description: 'Currently selected language (e.g. en_GB for English)'
        create_subfolder_enabled:
          type: boolean
          description: 'True if a subfolder should be created when adding a torrent'
        start_paused_enabled:
          type: boolean
          description: 'True if torrents should be added in a Paused state'
        auto_delete_mode:
          type: integer
          description: 'TODO'
        preallocate_all:
          type: boolean
          description: 'True if disk space should be pre-allocated for all files'
        incomplete_files_ext:
          type: boolean
          description: 'True if ".!qB" should be appended to incomplete files'
        auto_tmm_enabled:
          type: boolean
          description: 'True if Automatic Torrent Management is enabled by default'
        torrent_changed_tmm_enabled:
          type: boolean
          description: 'True if torrent should be relocated when its Category changes'
        save_path_changed_tmm_enabled:
          type: boolean
          description: 'True if torrent should be relocated when the default save path changes'
        category_changed_tmm_enabled:
          type: boolean
          description: "True if torrent should be relocated when its Category's save path changes"
        save_path:
          type: string
          description: 'Default save path for torrents, separated by slashes'
        temp_path_enabled:
          type: boolean
          description: 'True if folder for incomplete torrents is enabled'
        temp_path:
          type: string
          description: 'Path for incomplete torrents, separated by slashes'
        scan_dirs:
          type: object
          description: 'Property: directory to watch for torrent files, value: where torrents loaded from this directory should be downloaded to (see list of possible values below). Slashes are used as path separators; multiple key/value pairs can be specified'
        export_dir:
          type: string
          description: 'Path to directory to copy .torrent files to. Slashes are used as path separators'
        export_dir_fin:
          type: string
          description: 'Path to directory to copy .torrent files of completed downloads to. Slashes are used as path separators'
        mail_notification_enabled:
          type: boolean
          description: 'True if e-mail notification should be enabled'
        mail_notification_sender:
          type: string
          description: 'e-mail where notifications should originate from'
        mail_notification_email:
          type: string
          description: 'e-mail to send notifications to'
        mail_notification_smtp:
          type: string
          description: 'smtp server for e-mail notifications'
        mail_notification_ssl_enabled:
          type: boolean
          description: 'True if smtp server requires SSL connection'
        mail_notification_auth_enabled:
          type: boolean
          description: 'True if smtp server requires authentication'
        mail_notification_username:
          type: string
          description: 'Username for smtp authentication'
        mail_notification_password:
          type: string
          description: 'Password for smtp authentication'
        autorun_enabled:
          type: boolean
          description: 'True if external program should be run after torrent has finished downloading'
        autorun_program:
          type: string
          description: 'Program path/name/arguments to run if autorun_enabled is enabled; path is separated by slashes; you can use %f and %n arguments, which will be expanded by qBittorent as path_to_torrent_file and torrent_name (from the GUI; not the .torrent file name) respectively'
        queueing_enabled:
          type: boolean
          description: 'True if torrent queuing is enabled'
        max_active_downloads:
          type: integer
          description: 'Maximum number of active simultaneous downloads'
        max_active_torrents:
          type: integer
          description: 'Maximum number of active simultaneous downloads and uploads'
        max_active_uploads:
          type: integer
          description: 'Maximum number of active simultaneous uploads'
        dont_count_slow_torrents:
          type: boolean
          description: 'If true torrents w/o any activity (stalled ones) will not be counted towards max_active_* limits; see dont_count_slow_torrents for more information'
        slow_torrent_dl_rate_threshold:
          type: integer
          description: 'Download rate in KiB/s for a torrent to be considered "slow"'
        slow_torrent_ul_rate_threshold:
          type: integer
          description: 'Upload rate in KiB/s for a torrent to be considered "slow"'
        slow_torrent_inactive_timer:
          type: integer
          description: 'Seconds a torrent should be inactive before considered "slow"'
        max_ratio_enabled:
          type: boolean
          description: 'True if share ratio limit is enabled'
        max_ratio:
          type: number
          description: 'Get the global share ratio limit'
        max_ratio_act:
          type: integer
          description: 'Action performed when a torrent reaches the maximum share ratio. See list of possible values here below.'
        listen_port:
          type: integer
          description: 'Port for incoming connections'
        upnp:
          type: boolean
          description: 'True if UPnP/NAT-PMP is enabled'
        random_port:
          type: boolean
          description: 'True if the port is randomly selected'
        dl_limit:
          type: integer
          description: 'Global download speed limit in KiB/s; -1 means no limit is applied'
        up_limit:
          type: integer
          description: 'Global upload speed limit in KiB/s; -1 means no limit is applied'
        max_connec:
          type: integer
          description: 'Maximum global number of simultaneous connections'
        max_connec_per_torrent:
          type: integer
          description: 'Maximum number of simultaneous connections per torrent'
        max_uploads:
          type: integer
          description: 'Maximum number of upload slots'
        max_uploads_per_torrent:
          type: integer
          description: 'Maximum number of upload slots per torrent'
        stop_tracker_timeout:
          type: integer
          description: 'Timeout in seconds for a stopped announce request to trackers'
        enable_piece_extent_affinity:
          type: boolean
          description: 'True if the advanced libtorrent option piece_extent_affinity is enabled'
        bittorrent_protocol:
          type: integer
          description: 'Bittorrent Protocol to use (see list of possible values below)'
        limit_utp_rate:
          type: boolean
          description: 'True if [du]l_limit should be applied to uTP connections; this option is only available in qBittorent built against libtorrent version 0.16.X and higher'
        limit_tcp_overhead:
          type: boolean
          description: 'True if [du]l_limit should be applied to estimated TCP overhead (service data: e.g. packet headers)'
        limit_lan_peers:
          type: boolean
          description: 'True if [du]l_limit should be applied to peers on the LAN'
        alt_dl_limit:
          type: integer
          description: 'Alternative global download speed limit in KiB/s'
        alt_up_limit:
          type: integer
          description: 'Alternative global upload speed limit in KiB/s'
        scheduler_enabled:
          type: boolean
          description: 'True if alternative limits should be applied according to schedule'
        schedule_from_hour:
          type: integer
          description: 'Scheduler starting hour'
        schedule_from_min:
          type: integer
          description: 'Scheduler starting minute'
        schedule_to_hour:
          type: integer
          description: 'Scheduler ending hour'
        schedule_to_min:
          type: integer
          description: 'Scheduler ending minute'
        scheduler_days:
          type: integer
          description: 'Scheduler days. See possible values here below'
        dht:
          type: boolean
          description: 'True if DHT is enabled'
        pex:
          type: boolean
          description: 'True if PeX is enabled'
        lsd:
          type: boolean
          description: 'True if LSD is enabled'
        encryption:
          type: integer
          description: 'See list of possible values here below'
        anonymous_mode:
          type: boolean
          description: 'If true anonymous mode will be enabled; read more here; this option is only available in qBittorent built against libtorrent version 0.16.X and higher'
        proxy_type:
          type: integer
          description: 'See list of possible values here below'
        proxy_ip:
          type: string
          description: 'Proxy IP address or domain name'
        proxy_port:
          type: integer
          description: 'Proxy port'
        proxy_peer_connections:
          type: boolean
          description: 'True if peer and web seed connections should be proxified; this option will have any effect only in qBittorent built against libtorrent version 0.16.X and higher'
        proxy_auth_enabled:
          type: boolean
          description: "True proxy requires authentication; doesn't apply to SOCKS4 proxies"
        proxy_username:
          type: string
          description: 'Username for proxy authentication'
        proxy_password:
          type: string
          description: 'Password for proxy authentication'
        proxy_torrents_only:
          type: boolean
          description: 'True if proxy is only used for torrents'
        ip_filter_enabled:
          type: boolean
          description: 'True if external IP filter should be enabled'
        ip_filter_path:
          type: string
          description: 'Path to IP filter file (.dat, .p2p, .p2b files are supported); path is separated by slashes'
        ip_filter_trackers:
          type: boolean
          description: 'True if IP filters are applied to trackers'
        web_ui_domain_list:
          type: string
          description: 'Comma-separated list of domains to accept when performing Host header validation'
        web_ui_address:
          type: string
          description: 'IP address to use for the WebUI'
        web_ui_port:
          type: integer
          description: 'WebUI port'
        web_ui_upnp:
          type: boolean
          description: 'True if UPnP is used for the WebUI port'
        web_ui_username:
          type: string
          description: 'WebUI username'
        web_ui_password:
          type: string
          description: 'For API 鈮?v2.3.0: Plaintext WebUI password, not readable, write-only. For API < v2.3.0: MD5 hash of WebUI password, hash is generated from the following string: username:Web UI Access:plain_text_web_ui_password'
        web_ui_csrf_protection_enabled:
          type: boolean
          description: 'True if WebUI CSRF protection is enabled'
        web_ui_clickjacking_protection_enabled:
          type: boolean
          description: 'True if WebUI clickjacking protection is enabled'
        web_ui_secure_cookie_enabled:
          type: boolean
          description: 'True if WebUI cookie Secure flag is enabled'
        web_ui_max_auth_fail_count:
          type: integer
          description: 'Maximum number of authentication failures before WebUI access ban'
        web_ui_ban_duration:
          type: integer
          description: 'WebUI access ban duration in seconds'
        web_ui_session_timeout:
          type: integer
          description: 'Seconds until WebUI is automatically signed off'
        web_ui_host_header_validation_enabled:
          type: boolean
          description: 'True if WebUI host header validation is enabled'
        bypass_local_auth:
          type: boolean
          description: 'True if authentication challenge for loopback address (127.0.0.1) should be disabled'
        bypass_auth_subnet_whitelist_enabled:
          type: boolean
          description: 'True if webui authentication should be bypassed for clients whose ip resides within (at least) one of the subnets on the whitelist'
        bypass_auth_subnet_whitelist:
          type: string
          description: '(White)list of ipv4/ipv6 subnets for which webui authentication should be bypassed; list entries are separated by commas'
        alternative_webui_enabled:
          type: boolean
          description: 'True if an alternative WebUI should be used'
        alternative_webui_path:
          type: string
          description: 'File path to the alternative WebUI'
        use_https:
          type: boolean
          description: 'True if WebUI HTTPS access is enabled'
        ssl_key:
          type: string
          description: 'For API < v2.0.1: SSL keyfile contents (this is a not a path)'
        ssl_cert:
          type: string
          description: 'For API < v2.0.1: SSL certificate contents (this is a not a path)'
        web_ui_https_key_path:
          type: string
          description: 'For API 鈮?v2.0.1: Path to SSL keyfile'
        web_ui_https_cert_path:
          type: string
          description: 'For API 鈮?v2.0.1: Path to SSL certificate'
        dyndns_enabled:
          type: boolean
          description: 'True if server DNS should be updated dynamically'
        dyndns_service:
          type: integer
          description: 'See list of possible values here below'
        dyndns_username:
          type: string
          description: 'Username for DDNS service'
        dyndns_password:
          type: string
          description: 'Password for DDNS service'
        dyndns_domain:
          type: string
          description: 'Your DDNS domain name'
        rss_refresh_interval:
          type: integer
          description: 'RSS refresh interval'
        rss_max_articles_per_feed:
          type: integer
          description: 'Max stored articles per RSS feed'
        rss_processing_enabled:
          type: boolean
          description: 'Enable processing of RSS feeds'
        rss_auto_downloading_enabled:
          type: boolean
          description: 'Enable auto-downloading of torrents from the RSS feeds'
        rss_download_repack_proper_episodes:
          type: boolean
          description: 'For API 鈮?v2.5.1: Enable downloading of repack/proper Episodes'
        rss_smart_episode_filters:
          type: string
          description: 'For API 鈮?v2.5.1: List of RSS Smart Episode Filters'
        add_trackers_enabled:
          type: boolean
          description: 'Enable automatic adding of trackers to new torrents'
        add_trackers:
          type: string
          description: 'List of trackers to add to new torrent'
        web_ui_use_custom_http_headers_enabled:
          type: boolean
          description: 'For API 鈮?v2.5.1: Enable custom http headers'
        web_ui_custom_http_headers:
          type: string
          description: 'For API 鈮?v2.5.1: List of custom http headers'
        max_seeding_time_enabled:
          type: boolean
          description: 'True enables max seeding time'
        max_seeding_time:
          type: integer
          description: 'Number of minutes to seed a torrent'
        announce_ip:
          type: string
          description: 'TODO'
        announce_to_all_tiers:
          type: boolean
          description: 'True always announce to all tiers'
        announce_to_all_trackers:
          type: boolean
          description: 'True always announce to all trackers in a tier'
        async_io_threads:
          type: integer
          description: 'Number of asynchronous I/O threads'
        banned_IPs:
          type: string
          description: 'List of banned IPs'
        checking_memory_use:
          type: integer
          description: 'Outstanding memory when checking torrents in MiB'
        current_interface_address:
          type: string
          description: 'IP Address to bind to. Empty String means All addresses'
        current_network_interface:
          type: string
          description: 'Network Interface used'
        disk_cache:
          type: integer
          description: 'Disk cache used in MiB'
        disk_cache_ttl:
          type: integer
          description: 'Disk cache expiry interval in seconds'
        embedded_tracker_port:
          type: integer
          description: 'Port used for embedded tracker'
        enable_coalesce_read_write:
          type: boolean
          description: 'True enables coalesce reads & writes'
        enable_embedded_tracker:
          type: boolean
          description: 'True enables embedded tracker'
        enable_multi_connections_from_same_ip:
          type: boolean
          description: 'True allows multiple connections from the same IP address'
        enable_os_cache:
          type: boolean
          description: 'True enables os cache'
        enable_upload_suggestions:
          type: boolean
          description: 'True enables sending of upload piece suggestions'
        file_pool_size:
          type: integer
          description: 'File pool size'
        outgoing_ports_max:
          type: integer
          description: 'Maximal outgoing port (0: Disabled)'
        outgoing_ports_min:
          type: integer
          description: 'Minimal outgoing port (0: Disabled)'
        recheck_completed_torrents:
          type: boolean
          description: 'True rechecks torrents on completion'
        resolve_peer_countries:
          type: boolean
          description: 'True resolves peer countries'
        save_resume_data_interval:
          type: integer
          description: 'Save resume data interval in min'
        send_buffer_low_watermark:
          type: integer
          description: 'Send buffer low watermark in KiB'
        send_buffer_watermark:
          type: integer
          description: 'Send buffer watermark in KiB'
        send_buffer_watermark_factor:
          type: integer
          description: 'Send buffer watermark factor in percent'
        socket_backlog_size:
          type: integer
          description: 'Socket backlog size'
        upload_choking_algorithm:
          type: integer
          description: 'Upload choking algorithm used (see list of possible values below)'
        upload_slots_behavior:
          type: integer
          description: 'Upload slots behavior used (see list of possible values below)'
        upnp_lease_duration:
          type: integer
          description: 'UPnP lease duration (0: Permanent lease)'
        utp_tcp_mixed_mode:
          type: integer
          description: 'μTP-TCP mixed mode algorithm (see list of possible values below)'
    MainLogReqDto:
      type: object
      properties:
        normal:
          type: boolean
          description: 'Include normal messages'
          default: true
        info:
          type: boolean
          description: 'Include info messages'
          default: true
        warning:
          type: boolean
          description: 'Include warning messages'
          default: true
        critical:
          type: boolean
          description: 'Include critical messages'
          default: true
        last_known_id:
          type: integer
          description: 'Exclude messages with "message id" <= last_known_id'
          default: -1
    MainLogDto:
      type: object
      properties:
        id:
          type: integer
          description: 'ID of the message'
        message:
          type: string
          description: 'Text of the message'
        timestamp:
          type: integer
          description: 'Milliseconds since epoch'
        type:
          type: integer
          description: 'Type of the message'
          enum: [ 1, 2, 4, 8 ]
    PeerLogDto:
      type: object
      properties:
        id:
          type: integer
          description: 'ID of the peer'
        ip:
          type: string
          description: 'IP of the peer'
        timestamp:
          type: integer
          description: 'Milliseconds since epoch'
        blocked:
          type: boolean
          description: 'Whether or not the peer was blocked'
        reason:
          type: string
          description: 'Reason of the block'
    MainDataDto:
      type: object
      properties:
        rid:
          type: integer
          description: 'Response ID'
        full_update:
          type: boolean
          description: 'Whether the response contains all the data or partial data'
        torrents:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/TorrentsInfoDto'
        torrents_removed:
          type: array
          description: 'List of hashes of torrents removed since last request'
        categories:
          type: object
          description: 'Info for categories added since last request'
        categories_removed:
          type: array
          description: 'List of categories removed since last request'
        tags:
          type: array
          description: 'List of tags added since last request'
        tags_removed:
          type: array
          description: 'List of tags removed since last request'
        server_state:
          type: object
          description: 'Global transfer info'
    TransferInfoDto:
      type: object
      properties:
        dl_info_speed:
          type: integer
          description: 'Global download rate (bytes/s)'
        dl_info_data:
          type: integer
          description: 'Data downloaded this session (bytes)'
        up_info_speed:
          type: integer
          description: 'Global upload rate (bytes/s)'
        up_info_data:
          type: integer
          description: 'Data uploaded this session (bytes)'
        dl_rate_limit:
          type: integer
          description: 'Download rate limit (bytes/s)'
        up_rate_limit:
          type: integer
          description: 'Upload rate limit (bytes/s)'
        dht_nodes:
          type: integer
          description: 'DHT nodes connected to'
        connection_status:
          type: string
          description: 'Connection status. See possible values here below'
        queueing:
          type: boolean
          description: 'True if torrent queueing is enabled'
          required: false
        use_alt_speed_limits:
          type: boolean
          description: 'True if alternative speed limits are enabled'
          required: false
        refresh_interval:
          type: integer
          description: 'Transfer list refresh interval (milliseconds)'
          required: false
    TorrentsInfoReqDto:
      type: object
      properties:
        peers:
          type: string
          description: "The peer to ban, or multiple peers separated by a pipe |. Each peer is a colon-separated host:port"
        filter:
          type: string
          description: "Filter torrent list by state. Allowed state filters: all, downloading, seeding, completed, paused, active, inactive, resumed, stalled, stalled_uploading, stalled_downloading, errored"
          required: false
        category:
          type: string
          description: "Get torrents with the given category (empty string means 'without category'; no 'category' parameter means 'any category'). Remember to URL-encode the category name. For example, My category becomes My%20category"
          required: false
        tag:
          type: string
          description: "Get torrents with the given tag (empty string means 'without tag'; no 'tag' parameter means 'any tag'. Remember to URL-encode the category name. For example, My tag becomes My%20tag"
          required: false
        sort:
          type: string
          description: "Sort torrents by given key. They can be sorted using any field of the response's JSON array (which are documented below) as the sort key."
          required: false
        reverse:
          type: bool
          description: "Enable reverse sorting. Defaults to false"
          required: false
        limit:
          type: integer
          description: "Limit the number of torrents returned"
          required: false
        offset:
          type: integer
          description: "Set offset (if less than 0, offset from end)"
          required: false
        hashes:
          type: string
          description: "Filter by hashes. Can contain multiple hashes separated by |"
          required: false
    TorrentsInfoDto:
      type: object
      properties:
        added_on:
          type: integer
          description: 'Time (Unix Epoch) when the torrent was added to the client'
        amount_left:
          type: integer
          description: 'Amount of data left to download (bytes)'
        auto_tmm:
          type: boolean
          description: 'Whether this torrent is managed by Automatic Torrent Management'
        availability:
          type: number
          description: 'Percentage of file pieces currently available'
        category:
          type: string
          description: 'Category of the torrent'
        completed:
          type: integer
          description: 'Amount of transfer data completed (bytes)'
        completion_on:
          type: integer
          description: 'Time (Unix Epoch) when the torrent completed'
        content_path:
          type: string
          description: 'Absolute path of torrent content (root path for multifile torrents, absolute file path for singlefile torrents)'
        dl_limit:
          type: integer
          description: 'Torrent download speed limit (bytes/s). -1 if ulimited.'
        dlspeed:
          type: integer
          description: 'Torrent download speed (bytes/s)'
        downloaded:
          type: integer
          description: 'Amount of data downloaded'
        downloaded_session:
          type: integer
          description: 'Amount of data downloaded this session'
        eta:
          type: integer
          description: 'Torrent ETA (seconds)'
        f_l_piece_prio:
          type: boolean
          description: 'True if first last piece are prioritized'
        force_start:
          type: boolean
          description: 'True if force start is enabled for this torrent'
        hash:
          type: string
          description: 'Torrent hash'
        last_activity:
          type: integer
          description: 'Last time (Unix Epoch) when a chunk was downloaded/uploaded'
        magnet_uri:
          type: string
          description: 'Magnet URI corresponding to this torrent'
        max_ratio:
          type: number
          description: 'Maximum share ratio until torrent is stopped from seeding/uploading'
        max_seeding_time:
          type: integer
          description: 'Maximum seeding time (seconds) until torrent is stopped from seeding'
        name:
          type: string
          description: 'Torrent name'
        num_complete:
          type: integer
          description: 'Number of seeds in the swarm'
        num_incomplete:
          type: integer
          description: 'Number of leechers in the swarm'
        num_leechs:
          type: integer
          description: 'Number of leechers connected to'
        num_seeds:
          type: integer
          description: 'Number of seeds connected to'
        priority:
          type: integer
          description: 'Torrent priority. Returns -1 if queuing is disabled or torrent is in seed mode'
        progress:
          type: number
          description: 'Torrent progress (percentage/100)'
        ratio:
          type: number
          description: 'Torrent share ratio. Max ratio value: 9999.'
        ratio_limit:
          type: number
          description: 'TODO (what is different from max_ratio?)'
        save_path:
          type: string
          description: "Path where this torrent's data is stored"
        seeding_time:
          type: integer
          description: 'Torrent elapsed time while complete (seconds)'
        seeding_time_limit:
          type: integer
          description: 'TODO (what is different from max_seeding_time?) seeding_time_limit is a per torrent setting, when Automatic Torrent Management is disabled, furthermore then max_seeding_time is set to seeding_time_limit for this torrent. If Automatic Torrent Management is enabled, the value is -2. And if max_seeding_time is unset it have a default value -1.'
        seen_complete:
          type: integer
          description: 'Time (Unix Epoch) when this torrent was last seen complete'
        seq_dl:
          type: boolean
          description: 'True if sequential download is enabled'
        size:
          type: integer
        state:
          type: string
          description: 'Torrent state. See table here below for the possible values.'
        super_seeding:
          type: boolean
          description: 'True if super seeding is enabled.'
        tags:
          type: string
          description: 'Comma-concatenated tag list of the torrent.'
        time_active:
          type: integer
          description: 'Total active time (seconds).'
        total_size:
          type: integer
          description: 'Total size (bytes) of all file in this torrent (including unselected ones).'
        tracker:
          type: string
          description: 'The first tracker with working status. Returns empty string if no tracker is working.'
        up_limit:
          type: integer
          description: 'Torrent upload speed limit (bytes/s). -1 if unlimited.'
        uploaded:
          type: integer
          description: 'Amount of data uploaded.'
        uploaded_session:
          type: integer
          description: 'Amount of data uploaded this session.'
        upspeed:
          type: integer
          description: 'Torrent upload speed (bytes/s).'
    TorrentPropertiesDto:
      type: object
      properties:
        save_path:
          type: string
          description: Torrent save path
          creation_date:
            type: integer
            description: Torrent creation date (Unix timestamp)
          piece_size:
            type: integer
            description: Torrent piece size (bytes)
          comment:
            type: string
            description: Torrent comment
          total_wasted:
            type: integer
            description: Total data wasted for torrent (bytes)
          total_uploaded:
            type: integer
            description: Total data uploaded for torrent (bytes)
          total_uploaded_session:
            type: integer
            description: Total data uploaded this session (bytes)
          total_downloaded:
            type: integer
            description: Total data downloaded for torrent (bytes)
          total_downloaded_session:
            type: integer
            description: Total data downloaded this session (bytes)
          up_limit:
            type: integer
            description: Torrent upload limit (bytes/s)
          dl_limit:
            type: integer
            description: Torrent download limit (bytes/s)
          time_elapsed:
            type: integer
            description: Torrent elapsed time (seconds)
          seeding_time:
            type: integer
            description: Torrent elapsed time while complete (seconds)
          nb_connections:
            type: integer
            description: Torrent connection count
          nb_connections_limit:
            type: integer
            description: Torrent connection count limit
          share_ratio:
            type: number
            format: number
            description: Torrent share ratio
          addition_date:
            type: integer
            description: When this torrent was added (unix timestamp)
          completion_date:
            type: integer
            description: Torrent completion date (unix timestamp)
          created_by:
            type: string
            description: Torrent creator
          dl_speed_avg:
            type: integer
            description: Torrent average download speed (bytes/second)
          dl_speed:
            type: integer
            description: Torrent download speed (bytes/second)
          eta:
            type: integer
            description: Torrent ETA (seconds)
          last_seen:
            type: integer
            description: Last seen complete date (unix timestamp)
          peers:
            type: integer
            description: Number of peers connected to
          peers_total:
            type: integer
            description: Number of peers in the swarm
          pieces_have:
            type: integer
            description: Number of pieces owned
          pieces_num:
            type: integer
            description: Number of pieces of the torrent
          reannounce:
            type: integer
            description: Number of seconds until the next announce
          seeds:
            type: integer
            description: Number of seeds connected to
          seeds_total:
            type: integer
            description: Number of seeds in the swarm
          total_size:
            type: integer
            description: Torrent total size (bytes)
          up_speed_avg:
            type: integer
            description: Torrent average upload speed (bytes/second)
          up_speed:
            type: integer
            description: Torrent upload speed (bytes/second)
    TrackerDto:
      type: object
      properties:
        url:
          type: string
          description: 'Tracker URL.'
        status:
          type: integer
          description: 'Tracker status. See the table below for possible values.'
        tier:
          type: integer
          description: 'Tracker priority tier. Lower tier trackers are tried before higher tiers. Tier numbers are valid when >= 0, < 0 is used as placeholder when tier does not exist for special entries (such as DHT).'
        num_peers:
          type: integer
          description: 'Number of peers for current torrent, as reported by the tracker.'
        num_seeds:
          type: integer
          description: 'Number of seeds for current torrent, as reported by the tracker.'
        num_leeches:
          type: integer
          description: 'Number of leeches for current torrent, as reported by the tracker.'
        num_downloaded:
          type: integer
          description: 'Number of completed downloads for current torrent, as reported by the tracker.'
        msg:
          type: string
          description: 'Tracker message (there is no way of knowing what this message is - it''s up to tracker admins).'
    FileDto:
      type: object
      properties:
        name:
          type: string
          description: File name (including relative path)
        size:
          type: integer
          description: File size (bytes)
        progress:
          type: number
          description: File progress (percentage/100)
        priority:
          type: integer
          description: File priority. See possible values here below
          enum: [ 0, 1, 6, 7 ]
        is_seed:
          type: boolean
          description: True if file is seeding/complete
        piece_range:
          type: array
          items:
            type: integer
          description: The first number is the starting piece index and the second number is the ending piece index (inclusive)
        availability:
          type: number
          description: Percentage of file pieces currently available (percentage/100)
    AddTorrentDto:
      type: object
      properties:
        urls:
          type: string
          description: 'URLs separated with newlines'
        torrents:
          type: string
          description: 'Raw data of torrent file. torrents can be presented multiple times.'
        savepath:
          type: string
          description: 'Download folder'
        cookie:
          type: string
          description: 'Cookie sent to download the .torrent file'
        category:
          type: string
          description: 'Category for the torrent'
        tags:
          type: string
          description: 'Tags for the torrent, split by '','''
        skip_checking:
          type: string
          description: 'Skip hash checking. Possible values are true, false (default)'
        paused:
          type: string
          description: 'Add torrents in the paused state. Possible values are true, false (default)'
        root_folder:
          type: string
          description: 'Create the root folder. Possible values are true, false, unset (default)'
        rename:
          type: string
          description: 'Rename torrent'
        upLimit:
          type: integer
          description: 'Set torrent upload speed limit. Unit in bytes/second'
        dlLimit:
          type: integer
          description: 'Set torrent download speed limit. Unit in bytes/second'
        ratioLimit:
          type: number
          description: 'Set torrent share ratio limit'
          x-version: '2.8.1'
        seedingTimeLimit:
          type: integer
          description: 'Set torrent seeding time limit. Unit in minutes'
          x-version: '2.8.1'
        autoTMM:
          type: boolean
          description: 'Whether Automatic Torrent Management should be used'
        sequentialDownload:
          type: string
          description: 'Enable sequential download. Possible values are true, false (default)'
        firstLastPiecePrio:
          type: string
          description: 'Prioritize download first last piece. Possible values are true, false (default)'
    RssRuleDto:
      type: object
      properties:
        enabled:
          type: boolean
          description: 'Indicates whether the rule is enabled or not.'
        mustContain:
          type: string
          description: 'The substring that the torrent name must contain.'
        mustNotContain:
          type: string
          description: 'The substring that the torrent name must not contain.'
        useRegex:
          type: boolean
          description: 'Indicates whether to enable regex mode in "mustContain" and "mustNotContain".'
        episodeFilter:
          type: string
          description: 'The definition of the episode filter.'
        smartFilter:
          type: boolean
          description: 'Indicates whether to enable smart episode filter.'
        previouslyMatchedEpisodes:
          type: array
          description: 'The list of episode IDs already matched by smart filter.'
        affectedFeeds:
          type: array
          description: 'The list of feed URLs the rule applies to.'
        ignoreDays:
          type: number
          description: 'Ignore subsequent rule matches within the specified number of days.'
        lastMatch:
          type: string
          description: 'The last time the rule matched a torrent.'
        addPaused:
          type: boolean
          description: 'Indicates whether to add matched torrent in paused mode.'
        assignedCategory:
          type: string
          description: 'The category to assign to the torrent.'
        savePath:
          type: string
          description: 'The directory to save the torrent to.'
